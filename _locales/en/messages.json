{
	"manifest_name": {
		"message": "Salesforce Lightning Inspector",
		"description": "Public title that shows up in the list of extensions the user has installed."
	},
	"manifest_description": {
		"message": "For inspecting Lightning apps",
		"description": "Description that shows up in the list of extensions the user has installed."
	},
	"devtools_tabname": {
		"message": "Lightning",
		"description": "The tab that shows up in the chrome devtools"
	},
	"tabs_componenttree": {
		"message": "Component Tree",
		"description": "Tab inside the inspector that shows the tree of components that make up the application."
	},
	"tabs_performance": {
		"message": "Performance",
		"description": "Tab inside the inspector that shows the panel which measures the time taken to create components."
	},
	"tabs_transactions": {
		"message": "Transactions",
		"description": "Tab inside the inspector that shows data on communication with the server. We've called these transactions since it is grouping of measures for a feature."
	},
	"tabs_eventlog": {
		"message": "Event Log",
		"description": "Tab inside the inspector that shows all the events that are being fired and handled."
	},
	"tabs_actions": {
		"message": "Actions",
		"description": "Tab inside the inspector that shows all the actions. Actions are calls to functionality on the server."
	},
	"tabs_storage": {
		"message": "Storage",
		"description": "Tab inside the inspector that shows what we're storing and caching on the different client side data stores."
	},
	"tabs_lds": {
		"message": "LDS",
		"description": "Tab inside the inspector that shows what records are cached by LDS."
	},
	"tabs_help": {
		"message": "Help",
		"description": "Tooltip for the dropdown that shows links to different portions of documentation."
	},
	"menu_refresh": {
		"message": "Refresh",
		"description": "Button that refreshes the information for the current tab."
	},
	"menu_record": {
		"message": "Toggle Recording",
		"description": "Button that toggles whether we care about the current operations happening on the page."
	},
	"menu_clear": {
		"message": "Clear",
		"description": "Remove all currently recorded information."
	},
	"menu_filter": {
		"message": "Filter",
		"description": "Label for the box that limits what is displayed in the tab"
	},
	"kb": {
		"message": "KB",
		"description": "Abbreviation for Kilobytes."
	},
	"ms": {
		"message": "ms",
		"description": "Abbreviation for milliseconds."
	},
	"componenttree_menu_expandall": {
		"message": "Expand All",
		"description": "A button that shows all the available information by showing the hidden children."
	},
	"componenttree_menu_showids": {
		"message": "Show Global IDs",
		"description": "Button that toggles the display of the unique id in the panel for every component in the tree that has one."
	},
	"componenttree_menu_updateonselect": {
		"message": "Update On Select",
		"description": "When you click on new tree nodes, should they get their latest data? Select to say yes."
	},
	"performance_menu_showcollected": {
		"message": "Show Current Collected",
		"description": "While recording, we don't show what we have collected. The button associated with this label will show what we recorded without stopping recording."
	},
	"eventlog_menu_appevents": {
		"message": "App Events",
		"description": "A filter label which toggles visibility of events that have a type of APPLICATION."
	},
	"eventlog_menu_cmpevents": {
		"message": "Cmp Events",
		"description": "A filter label which toggles visibility of events that have a type of COMPONENT."
	},
	"eventlog_menu_unhandled": {
		"message": "Unhandled",
		"description": "A filter which toggles events that were fired, but were not handled and had no effect."
	},
	"eventlog_menu_appevents_tooltip": {
		"message": "Show application events",
		"description": "The tooltip of the application events filter button."
	},
	"eventlog_menu_cmpevents_tooltip": {
		"message": "Show component events",
		"description": "The tooltip of the component events filter button."
	},
	"eventlog_menu_unhandled_tooltip": {
		"message": "Show unhandled events",
		"description": "The tooltip of the Unhandled filter button."
	},
	"actions_menu_storable": {
		"message": "Storable",
		"description": "Button that filters all the actions collected on whether they are storable (can be saved locally and not retrieved each time.)"
	},
	"actions_menu_cached": {
		"message": "Cached",
		"description": "Button that filters all the actions collected on whether the action was cached."
	},
	"actions_menu_background": {
		"message": "Background",
		"description": "Button that filters all the actions on whether they were executed in the background."
	},
	"actions_menu_success": {
		"message": "Success",
		"description": "Button that filters the actions on whether they were successfully sent and executed on the server."
	},
	"actions_menu_incomplete": {
		"message": "Incomplete",
		"description": "Button that filters actions on whether they were sent to the server but no response was received."
	},
	"actions_menu_error": {
		"message": "Error",
		"description": "Button that filters actions on whether an Error occured sending the action."
	},
	"actions_menu_aborted": {
		"message": "Aborted",
		"description": "Button that filters actions on whether the Action was prevented from being sent to the client."
	},
	"actions_menu_record_tooltip": {
		"message": "Toggle recording",
		"description": "Tooltip for the actions recording button. We only track actions while this is enabled."
	},
	"actions_menu_storable_tooltip": {
		"message": "Show storable actions",
		"description": "Tooltip for the actions storable filter."
	},
	"actions_menu_cached_tooltip": {
		"message": "Show storable actions served from cache",
		"description": "Tooltip for the actions cache filter."
	},
	"actions_menu_background_tooltip": {
		"message": "Show background actions",
		"description": "Tooltip for the background actions filter."
	},
	"actions_menu_success_tooltip": {
		"message": "Show actions that succeeded",
		"description": "Tooltip for the successfull actions filter."
	},
	"actions_menu_incomplete_tooltip": {
		"message": "Show actions in incomplete state",
		"description": "Tooltip for the incomplete actions filter."
	},
	"actions_menu_error_tooltip": {
		"message": "Show actions that errored",
		"description": "Tooltip for the errored actions filter."
	},
	"actions_menu_aborted_tooltip": {
		"message": "Show aborted actions",
		"description": "Tooltip for the aborted actions filter."
	},
	"actions_section_pendingoverrides": {
		"message": "Pending Overrides",
		"description": "Heading for the section which contains the actions that are being overridden by the inspector."
	},
	"actions_section_pendingoverrides_description": {
		"message": "Drag actions here. Next time we see action with same name, we will either drop it, send back modified response, or error response.",
		"description": "Helper text which describes to the user how to use the pending overrides section."
	},
	"actions_section_processedoverrides": {
		"message": "Processed Overrides",
		"description": "Header for the section which contains the actions that were overridden. "
	},
	"actions_section_pending": {
		"message": "Pending",
		"description": "Header for the section which lists the actions that are waiting to be sent to the server."
	},
	"actions_section_running": {
		"message": "Running",
		"description": "Header for the section which lists the actions that have been sent to the server but have not yet completed."
	},
	"actions_section_completed": {
		"message": "Completed",
		"description": "Header for the section which lists all the actions that have completed and had their callback functions called."
	},
	"transactions_id": {
		"message": "Id",
		"description": "Unique identifier for a transaction (grouping of instrumentation data)"
	},
	"transactions_starttime": {
		"message": "Start Time",
		"description": "The amount of time in seconds since the page loaded when the transaction started."
	},
	"transactions_duration": {
		"message": "Duration",
		"description": "How long in milliseconds the transaction was in process."
	},
	"transactions_context": {
		"message": "Context",
		"description": "Contextual information for the transaction passed by the transaction author."
	},
	"transactions_actions": {
		"message": "Actions",
		"description": "Count of the actions that occurred during the transaction."
	},
	"transactions_xhrs": {
		"message": "XHRs",
		"description": "Count of the XmlHttpRequest calls (server connections) that occured during the length of this transaction."
	},
	"transactions_starttime_info": {
		"message": "(second since page loaded)",
		"description": "Start time label that describes what the column data means."
	},
	"transactions_duration_info": {
		"message": " (ms)",
		"description": "Duration information that describes that the column is in milliseconds."
	},
	"transactions_timeline": {
		"message": "Timeline",
		"description": "Timeline of lightning transaction marks."
	},
	"eventcard_parameters": {
		"message": "Parameters",
		"description": "Label showing the information sent along with an event. "
	},
	"eventcard_caller": {
		"message": "Caller",
		"description": "Label showing which function fired this event."
	},
	"eventcard_source": {
		"message": "Source",
		"description": "Which component was responsible for firing the event."
	},
	"eventcard_duration": {
		"message": "Duration",
		"description": "How long it took for this event to execute."
	},
	"eventcard_handledby": {
		"message": "Handled By",
		"description": "Which components reacted to the firing of this event."
	},
	"eventcard_callStack": {
		"message": "Call Stack",
		"description": "The listing of events that proceeded this event instance is called a Call Stack"
	},
	"eventcard_event": {
		"message": "Event Fired",
		"description": "This column shows the events that were fired by the framework and components."
	},
	"eventcard_actions": {
		"message": "Handled By",
		"description": "This column shows the functions that were called as the result of the action being fired."
	},
	"eventcard_none": {
		"message": "None",
		"description": "There are no elements contained in the call stack."
	},
	"eventcard_togglegrid": {
		"message": "Toggle Grid",
		"description": "Button label that opens up a grid that details the call graph of this event and it's ancestors / descendants."
	},
	"actioncard_id": {
		"message": "Id",
		"description": "Unique Identifier of the action."
	},
	"actioncard_state": {
		"message": "State",
		"description": "The current status of the action. Values include SUCCESS, ERROR, ABORT, INCOMPLETE."
	},
	"actioncard_abortable": {
		"message": "Abortable",
		"description": "Was this action abortable. "
	},
	"actioncard_background": {
		"message": "Background",
		"description": "Was this action executed in the background."
	},
	"actioncard_created": {
		"message": "Created Components",
		"description": "How many components were created as a result of this action."
	},
	"actioncard_storable": {
		"message": "Storable",
		"description": "Was this action storable"
	},
	"actioncard_storablesize": {
		"message": "Storable Size Est.",
		"description": "What is the size of the stored action."
	},
	"actioncard_storablerefresh": {
		"message": "Storable Refresh",
		"description": "Did this refresh the storage entry?"
	},
	"actioncard_storablecachehit": {
		"message": "Storable Cache Hit",
		"description": "Did this retrieve the result from the Storage or did from the server?"
	},
	"actioncard_storablekey": {
		"message": "Storage Key",
		"description": "Unique key for this action entry in storage."
	},
	"actioncard_removeaction": {
		"message": "Remove Action",
		"description": "Assistive text for the remove button on actions when in the pending or processed overrides sections."
	},
	"actioncard_parameters": {
		"message": "Parameters",
		"description": "Data sent to the server as part of this action call."
	},
	"actioncard_result": {
		"message": "Result",
		"description": "Return value from the server."
	},
	"actioncard_error": {
		"message": "Error",
		"description": "If an error was returned, shows the value here."
	},
	"actioncard_dropaction": {
		"message": "Drop the Action",
		"description": "Option which would prevent the action from being sent to the server."
	},
	"actioncard_overrideresult": {
		"message": "Override the Result",
		"description": "Option which would allow you to specify a different return value from the server."
	},
	"actioncard_errorresponse": {
		"message": "Error Response Next Time",
		"description": "Option which allows you to specify that the action should result in an error of a type you can specify."
	},
	"actioncard_key": {
		"message": "Key",
		"description": "When specifying the override, this is the key of that result."
	},
	"actioncard_newvalue": {
		"message": "New Value",
		"description": "When specifying the override, this is the body of that result."
	},
	"actioncard_save": {
		"message": "Save",
		"description": "Commit this override to happen."
	},
	"actioncard_cancel": {
		"message": "Cancel",
		"description": "Abandon override changes."
	},
	"actioncard_edit": {
		"message": "Edit",
		"description": "Edit override changes."
	},
	"actioncard_eventDescriptor": {
		"message": "Event Descriptor",
		"description": "EventDescriptor for the event we gonna fire."
	},
	"actioncard_eventAttribute": {
		"message": "Event Attribute",
		"description": "EventAttribute for the event we gonna fire."
	},
	"actioncard_errormessage": {
		"message": "Error Message",
		"description": "When specifying the action should throw an error, this is the error message it should throw."
	},
	"actioncard_errorstack": {
		"message": "Error Stack",
		"description": "When specifying the action should throw an error, this is the stack trace for the error it should throw."
	},
	"actioncard_callingComponent": {
		"message": "Component Source"
	},
	"componentview_globalid": {
		"message": "Global ID",
		"description": "Unique Global ID of the component you are inspecting"
	},
	"componentview_isrendered": {
		"message": "Is Rendered",
		"description": "Is this component rendered and added to the HTML page."
	},
	"componentview_isvalid": {
		"message": "Is Valid",
		"description": "Has the component been destroyed?"
	},
	"componentview_descriptor": {
		"message": "Descriptor",
		"description": "The type of component in the form markup://namespace:componentname"
	},
	"componentview_elements": {
		"message": "HTML Elements",
		"description": "How many html elements this component and all its children have generated."
	},
	"componentview_rerendered": {
		"message": "Rerendered Count",
		"description": "How many times this element has rerendered."
	},
	"componentview_avpfvp": {
		"message": "Attribute & Facet Value Provider",
		"description": "Where references get their values from. Facets and Attributes can resolve their references against different components sometimes. This label is used when attributes and facets get their references from the same component."
	},
	"componentview_avp": {
		"message": "Attribute Value Provider",
		"description": "Where you resolve your attribute references against."
	},
	"componentview_fvp": {
		"message": "Facet Value Provider",
		"description": "Where you resolve your references in facets against. Facets are collections of other components passed to your component."
	},
	"componentview_attributes": {
		"message": "Attributes",
		"description": "Attributes are your components properties."
	},
	"componentview_model": {
		"message": "Model",
		"description": "A model is another collection of properties on your component, most likely coming from the server."
	},
	"componentview_super": {
		"message": "Super",
		"description": "The component that the current component has extended."
	},
	"componentview_handlers": {
		"message": "Handlers",
		"description": "Shows the events on the component that are being listened to and what function would be executed when the handler is hit."
	},
	"chaosview_samplingInterval_in_second": {
		"message": "Sampling Interval In Seconds",
		"description": "how many seconds between two clicking"
	},
	"chaosview_drop_action_by_percentage": {
		"message": "Drop Actions By Percentage",
		"description": "drop action randomly, by some percentage"
	},
	"chaosview_error_action_by_percentage": {
		"message": "Error Response for Actions By Percentage",
		"description": "return error response for action randomly, by some percentage"
	},
	"chaosview_buton_stop_all_runs": {
		"message": "Panic Button : Stop Chaos Run",
		"description": "push this to force all chaos run to stop"
	},
	"chaosview_new_chaos_run": {
		"message": "New Chaos Run",
		"description": "area for buttons on start/stop/save a new chaos run"
	},
	"chaosview_button_start": {
		"message": "Start Chaos Run",
		"description": "push this to start a new chaos run"
	},
	"chaosview_button_stop": {
		"message": "Stop The Run",
		"description": "push this to stop the new chaos run"
	},
	"chaosview_button_save": {
		"message": "Save The Run",
		"description": "push this to save the new chaos run"
	},
	"chaosview_old_chaos_run": {
		"message": "Replay Chaos Run",
		"description": "area for buttons on replaying existing chaos run"
	},
	"chaosview_button_cancel": {
		"message": "Cancel",
		"description": "push this to clear up the loaded chaos run"
	},
	"chaosview_button_replay": {
		"message": "Replay Chaos Run",
		"description": "push this to replay the saved chaos run"
	},
	"chaosview_chaos_run_result": {
		"message": " Chaos Run Result",
		"description": "area for chaos run status update"
	},
	"sidebar_ghosttext" : {
		"message": "Select a tag in the elements panel and it's Lightning Information will show here",
		"description": "Sidebar depends on you selecting an element so we can show information about it, when you haven't selected anything, you get this helpfull message."
	},
	"not_available": {
		"message": "N/a",
		"description": "The information is not available."
	},
	"open_devtools_notif": {
		"message": "Please open the developer console and select the \"Lightning\" tab to access the Lightning inspector.",
		"description": "Instructions on how to open up the Lightning Inspector."
	},
	"lightning_unavailable": {
		"message": "Lightning was not detected on this page",
		"description": "When the inspector is launched and the page doesn't have Aura, we won't be able to work, so instead show this message."
	},
	"try_again_button": {
		"message": "Try Again",
		"description": "Button the user can click to see if Lightning is on the page yet."

	}
}
